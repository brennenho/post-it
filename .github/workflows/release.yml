name: release
on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
      
      - name: get package version
        id: version
        run: |
          pip install tomli
          VERSION=$(python -c "import tomli; print(tomli.loads(open('pyproject.toml', 'rb').read())['project']['version'])")
          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: check versions match
        run: |
          RELEASE_TAG=${{{ github.event.release.tag_name }}#v}
          if [ "${{ env.PACKAGE_VERSION }}" == "$RELEASE_TAG" ]; then
            echo "Version match: ${{ env.PACKAGE_VERSION }}"
          else
            echo "Version mismatch! Package version: ${{ env.PACKAGE_VERSION }}, Release tag: $RELEASE_TAG"
            exit 1
          fi

      - name: build distributions
        run: |
          python -m pip install build
          python -m build

      - name: upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
    
  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10
    environment: release
    permissions:
      id-token: write

    steps:
      - name: download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
        
      - name: publish to pypi
        uses: pypa/gh-action-pypi-publish@release/v1